{"version":3,"sources":["MarkdownEditor.js","starterText.js","reportWebVitals.js","index.js"],"names":["PreviewText","props","id","HTMLReactParser","marked","text","Editor","className","cols","rows","value","onChange","handleChange","MarkdownEditor","state","bind","e","this","setState","target","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAOMA,EAAc,SAAAC,GAAK,OAAI,qBAAKC,GAAG,UAAR,SAAmBC,YAAgBC,IAAOH,EAAMI,UAEvEC,EAAS,SAAAL,GAAK,OAAI,0BAAUM,UAAU,MAAMC,KAAK,GAAGC,KAAK,KAAKC,MAAOT,EAAMI,KAAMM,SAAUV,EAAMW,aAAcV,GAAG,YAgCzGW,E,kDA3Bb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXT,KCjBkB,w7BDmBpB,EAAKO,aAAe,EAAKA,aAAaG,KAAlB,gBALH,E,gDAQnB,SAAaC,GACXC,KAAKC,SAAS,CAAEb,KAAMW,EAAEG,OAAOT,U,oBAGjC,WACE,OACE,sBAAKH,UAAU,qBAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAQF,KAAMY,KAAKH,MAAMT,KAAMO,aAAcK,KAAKL,iBAEpD,qBAAKL,UAAU,eAAf,SACE,cAAC,EAAD,CAAaF,KAAMY,KAAKH,MAAMT,gB,GApBXe,aEDdC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ed9aad7.chunk.js","sourcesContent":["import './MarkdownEditor.css';\nimport React, { Component } from 'react';\nimport marked from 'marked';\nimport HTMLReactParser from 'html-react-parser';\nimport {starterText} from './starterText';\n\n\nconst PreviewText = props => <div id=\"preview\">{HTMLReactParser(marked(props.text))}</div>;\n\nconst Editor = props => <textarea className=\"p-3\" cols=\"\" rows=\"15\" value={props.text} onChange={props.handleChange} id=\"editor\"></textarea>\n\n\n\nclass MarkdownEditor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text : starterText\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"row mt-5 rounded-3\">\n        <div className=\"col-md-6 p-4\">\n          <Editor text={this.state.text} handleChange={this.handleChange}/>\n        </div>\n        <div className=\"col-md-6 p-3\">\n          <PreviewText text={this.state.text}/>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default MarkdownEditor;\n","export const starterText = `# Welcome to my React Markdown Previewer!\n***\n## This is a sub-heading...\n***\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\nYou can also make text **bold**... whoa!\\n\nOr _italic_.\\n\nOr... wait for it... **_both!_**\\n\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\n\nThere's also [links](https://www.freecodecamp.org), and\\n\n> Block Quotes!\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n`\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MarkdownEditor from './MarkdownEditor';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MarkdownEditor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}